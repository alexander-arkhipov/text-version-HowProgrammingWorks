Добрый день! Cегодня у нас самая базовая самая начальная тема введение в
программирование она у нас будет разделена еще и на две лекции вот сейчас я одну эту прочитал а
до этой лекции еще была лекция для студентов к п и я ее тоже записал это же
выложу ну то есть обе будут записи вот эти лекции которые я в этом году
курсу добавил то есть уже какая-то часть лекции запись а вот эти которые я курсу добавил они
необходимую для того чтобы в программировании въехали самые-самые начинающие и это и следующее вот они
будут там буквально до самые базовые понятия о чем я предупреждал так что я надеюсь тут как раз пришла
такая аудитория мы сегодня практически даже кода
смотреть не будем а в основном остановимся на вопросах терминологии потому что весь остальной мой курс
который я вот подготовил там в прошлом-позапрошлом году и там за все пять лет он оказался достаточно сложным
то есть вот его начинают смотреть там в записи на ютюбе сложно потому что не все слова понятные
нужно сначала ввести какую-то базовую терминологию только после этого начинать
этот курс там о структуре курса и всякое такое вот посмотрите еще записи вторую
лекцию которая тоже сегодня записано о структуре курса там все будет то есть
сейчас мы чисто по материалу только будем идти итак сначала я собрал
чуть-чуть статистике вы уже регистрировались сюда через формы и многие из вас уже что-то знают то есть
вот 96 процентов аудитории уже знает что такое переменная константа достаточно
большое количество людей знают самые базовые вещи это хорошо конечно но мы
попробуем немножечко эти знания расширить потому что переменная и константа это не самое не самой
основополагающее понятие и точно также условия и цикл как вот ни странно это
это части синтаксиса языка программирования но в программировании
это не самый основополагающие вещи вот я ту же самую табличку с теми же самыми
понятиями переменные и константы условия циклы процедуры функции массивы и матрицы
объекты классы и методы и свойства немножечко переписал другими словами другой терминологией сразу чтобы вы
поняли что есть более широкие понятия которые включают себя вот эти вот вот
идентификатор вряд ли все понимают что
переменная константа это разные идентификаторы идентификаторов есть ещё
куча разных не только переменные константа мы попробуем спуститься и расширить эти
понятия до более общих до 1 тифе картера условия и цикл на самом деле условие с
условным переходом позволяет нам сделать цикл так так что это все-таки какие-то связанные понятия
но более общее понятие и тонирование потому что вот такая вещь как цикл не во
всех парадигмах программирования вообще применимо до функциональном программировании циклов нет альтере
рование есть и тем не менее мы можем проходиться по каким-то рядом по
цепочкам по коллекциям мы сможем оперировать потом лексический контекст это больше
более общее понятие для процедуры функции под программы и так далее кучи еще связанных понятий мы расширим те
знания которые возможно у вас есть поверхностный мы расширим суд политический контекст или вот структура
данных структура про структуры данных я не спрашивал кто знает что это именно
такое дано массивы матрица это в принципе есть самые простые структуры данных объекты класс тоже вроде как
достаточно базовые понятия но это базовые понятия в синтаксисе какого-то языка
программирование есть еще более общая вещь это система типов и вот из системы типов как раз объекты и класс и
собственно и выводятся и поэтому они существуют что есть системы типов и точно так же с методами и свойствами в
65 процентов людей из вас знают что такое методы и свойства но вряд ли большое количество людей
скажут что это члены класса метод и свойства значит еще раз хочу обратить
внимание что терминология это важно и вообще вся наша индустрия программного обеспечения стоит на того на том что у
нас есть какие-то слова под которыми мы понимаем более-менее одинаковые вещи но
вот чем отличаются какие-то смежные
понятия тут перечислено целая куча смежных понятия что такое инструкция операция команда выражения оператор
оператор директива они частично пересекаются ну частично это вещи
которые синонимы частично они имеют в это просто оттенки смысла и они еще
свойственны для разных парадигмы разных языков в каком-то языке так называется это по-другому называется но мы все это
сейчас более подробно разберем значит начнем с инструкции или оператора это не
всегда синоним но очень часто синоним потому что есть
базовое зычно и слова a statement да вот я в данном случае имею в виду
именно statement то есть тут мы будем в большей части операция все-таки на англоязычную
терминологию ну вот в нашей литературе или что в наших лекциях и статьях на русском языке вы можете
увидеть в принципе даже где то можете
увидеть даже что стоит montom называют там команду или что-нибудь другое не
обязательно инструкцию оператор это потому что просто люди чуть-чуть плавают терминологии хотя они могут прекрасно
разбираться во всем остальном но немножечко путаница происходит что это
такое statement это это какая-то очень маленькая синтаксическая единица сама и
атомарная из которой состоит язык программирования то есть это часть синтаксиса и теперь вам нужно понять что
такое синтаксис значит но вот эти вот
statement и они чем-то компилируются или интерпретируются естественно у нас есть
это среда исполнении или компилятор то есть statement и обрабатываются или
среду исполнения или компилятор или командным процессором в зависимости от того какой язык и или сразу исполняются
или переводятся в машинный код для дальнейшего исполнения теперь что такое синтаксис такое слово
тут тоже видели в определении это правила построения программного кода то
есть это практически то как мы должны буквы в каком порядке ставить то есть
вот как мы символов делаем стоит понты и statement of программы это вот в такой
именно последовательности но синтаксис он не затрагивает смысловую
часть то есть он никакой семантики в семени несет и его можно просто
проверить на валидность ну насколько насколько верно насколько правильно
написан именно с точки зрения вот может ли быть там какой-то символ в
определенном месте программа может быть этот тут разрешен а другой символ в этом месте не разрешен но это еще не значит
что это какая-то осмысленная программа то есть мы можем иметь много
синтаксически правильных программ но они будут с ошибками уже логического характера
а уже смысловую нагрузку они могут вообще и даже не нести то есть синтаксис
это самая базовая вещь ну и естественно что у вас будут специальные программы
которые этот синтаксис во лидируют то есть проверяют в частности вот я ссылку
прислал и скорее всего многие из вас уже поставили ядре которые проверяют то
мысль in town или имеют какой-то другой встроенный linder linder эта программа которая синтаксис проверяет просто чекает
на то в элитные отели не валидный то есть под синтаксические конструкции
которые заданы спецификации языка эта программа подходит или не подходит очень код
синтаксис проверяет именно код значит
теперь statement и мы можем разделять на кучу разных групп но тут не все ну почти
все это во первых операторы присвоения мы чуть позже увидим и у нас еще есть
специальная лекция про базовый синтаксис java скрипта на примере java script а вы можете в той
лекции увидеть операторы присвоения операторы сравнения когда мы хотим две
величины сравнить мы сравниваем именно величины естественно под эти величины могут поставляться различные переменные
и константы вызовы других функций и так далее но тем не менее если у нас между
двумя величинами будет стоять оператор сравнения то вы знаете больше меньше
больше равно и так далее это различные арифметические операторы
ну вы их тоже знаете это сложение вычитание отделения и так далее эту
некоторые реки тические операторы могут быть у нас не просто как символы в синтаксисе языка могут быть в какой-то
библиотеки ну вот как дура скрипте power допустим power находится масс . пал
то есть у нас только недавно появился
такой оператор возведении в нужную
степень x до этого у нас до использовал макс масс экс да теперь можно : уксуса
две звездочки ставить и одно число 2 звездочки и степень и она
будет в эту степень возводить в принципе есть операторы а есть функции которые
аналогичны этим оператором иногда они пересекаются иногда нет есть бинарные
логические операторы они очень похожи но имеют принципиально
разную природу бинарные рассматривают те значения которые подаются в эти
операторы они их рассматривают как последовательность бит а логически и
приводят их к одному биту то есть в бульон значению к true или false правда
или ложь и уже над одним логическим значениям выполняют какую-то операцию
строковые операторы вот кстати тот же самый плюс он одновременно является в
некоторых местах кода арифметическим императором чтобы числа складывать а в других это конкатенация строк который
склеивает две строки то есть для компьютера это вообще принципиально разные вещи и склеить строки и сложить
два числа там вообще разные до символ один и тот же ну это не во всех языках так и многих
людей очень не устраивает что один и тот же символ по-разному действуют в разных условиях
поэтому есть языки где это очень отличается операторы вызова функций ну
то есть это мы их увидим чуть позже чаще всего это круглые скобочки когда мы
выдаем какой-то идентификатор функции потом после него ставим круглые скобочки
передаем туда какие-то может аргумента или не передаем их вот это вот мы вызываем оператор вызова функции есть
унарные операторы то есть те которые умеют только один аргумент и всего лишь
один у нас есть еще тернарный оператор он тоже относится вообще оператором
ветвления но у него принципиально другой синтаксис чему его то мы увидим чуть позже мы
только должны понять что тернарный оператор это сейчас вот это оператор с тремя аргументами а унарный это с одним
аргументом значит теперь бывает
небольшая путаница в терминологии иногда встречается слово операция но
некоторые имеют в виду когда говорят операции имеют ввиду statement а некоторые имеют ввиду оператор ну
вообще более точно ну как бы это вообще не точное слово операция это такое более
высокоуровневые слова она там может быть где-нибудь в техническом задании скорее имеет место но вообще операция чаще
всего она ближе по смыслу к statement у а если вы видите что человек употребляет
ее называя оператор это ну скорее всего просто не то слово подобрал команда
команда тоже как бы близкая к стоит на
ту слова но это атомарная задача которую исполняет
какой-то интерпретатор какая-то командный процессор или же значит comand
line интерфейс вот слайд есть такое вот сокращение то есть это интерфейс командной строки и там есть за ним за
интерфейсом командной строке командный процессор он по одной команде считывает тот как
shell допустим наш или у воды есть ripple это тоже вот командный процессор
и он в одной строчке считывает он исполняет их как команды ну в принципе
иногда можно встречать что люди тоже стоит мы называют командой тоже бывает
такое чтоб вы не удивлялись еще есть директивы по ошибке иногда тоже стоит называют
директива минут совсем неправильно уже очень часто правильно называть the same
директивой инструкцию препроцессора то есть в see that are young lad допустим
да или define точно так же там в ассемблере и ку-да эквивалент в java
скрипте наверное директивы это you strict iwc а сам хотя по всем таксисту java script to you stake и us а
сам вообще являются просто строковых литералов мы чуть позже посмотрим что такое страховой литерал но
хоть они и являются строковых литералов обрабатываются как директивы то есть они переключают интерпретатор
или компе ряд или компилятор в определенный режим то есть они не
исполняются директивы не исполняются они среду обработки вашего программного кода
дают ей знать о чем то что нужно допустим в данном месте вставить
какой-то файл или допустим вместо такой-то строки подставлять весь дедом
другую строку видим окраса но в javascript те такого нету в в скрипте можно просто включать strict
режим но у нас практически во всех лекциях предполагается что он всегда включён поэтому с директивами вы будете
обязательно встречаться но у меня везде будет в коде просто первой строчкой кода
you strict написано ну и возможно вы будете где-то встречать еще юз а сам там
где а сам джез будет использоваться так теперь посмотрим что такое выражение
экспрешены это одно выражение это более
крупная синтаксическая конструкция которая может состоять из нескольких каких-то значений из нескольких
операторов из нескольких идентификаторов в которых еще встречаются у нас и
круглые скобки которые управляют последовательностью исполнения
операторов то есть у операторов естественно есть
приоритетность то есть вот допустим умножить имеет больший приоритет
чем вычесть и поэтому вот в примере чуть ниже нам нужно использовать круглые скобки
для того чтоб от длины отнять единицу только потом умножить на результаты выполнения функции вот этот пример
экспресс в котором у нас есть практически весь expression может
делиться на отдых спрошены самые маленькие это вот допустим длина минус 1 или минус 1 мы можем взять скобочки
скобочек можно расставлять любое количество мы можем просто единицу взять
скобочки просто лень взять скобочки просто идентификатор вот f тоже его
взять скобочки то есть как бы эти все скобочки будут опущены будут обработаны и действительно
повлияют находят исполнения программ только программы только те скобочки которые изменяют по умолчанию взятый
приоритет исполнении операций то есть вот функция куда первым аргументом
передается x а вторым интервал сначала вызовется функция а потом уже будет произведена
умножение то есть оператор вызова функции имеет больший приоритет чем умножение но вот внутри этой функции
тоже съесть 2 express шина в одном x прошение просто x а в другом экспресс они и написано
интервал там же внутри можно было бы написать f от x минус 5 допустим да или
f от x плюс интервал то есть мы бы внутри вызова функции тоже
могли сделать экспресса не то есть экспрешены могут быть большой вложенности один в другой и собственно
скобочками мы управляем последовательности но очень длинные
express шина делать не рекомендуется то есть если он у вас строчку не помещается
какое-то выражение то его лучше разделять на части и каждую часть присваивать в отдельную переменную но
это мы будем чуть позже проходить когда у нас будет оптимизация кода и стиль кода то есть там мы будем уже смотреть в
каких случаях expression можно разделять декомпозировать в каких случаях лучше
его на писать слитно если будет очень длинный expression ну я
в принципе своей практике встречал экспрешены ну размером с несколько страниц тем более
такие expression и иногда могут встречаться там у людей где-нибудь в яфетом iv и там пару страниц такой
expression и понять такой экспресс он уже очень сильно сложно поэтому вот я и говорю что нужно его как-то
декомпозировать причем декомпозировать его можно не только на отдельные переменные
но и на функции потому что части express шина можно забрать положить их как
функцию и обращаться к ним уже по имени функции просто в эсе мы потом будем вызывать несколько таких функций и
выражение стоящая под ифом сократится следующее понятие которое мы должны
рассмотреть это значение еще до переменной если мы просто напишем в
программном коде допустим цифру 5 вот так вот 5 написали и все это просто
значение мы его никуда не присвоили ни в какую переменную не передали как аргумент она просто есть и сразу
потерялась если мы напишем просто vds файле просто одну пятерку и все и больше
ничего это будет достаточно валидный java script file его можно будет исполнить но что сделает в этом случае
там надо допустим или там браузер когда мы его дадим просто вот такое вот одно
значение он это значение где-то лакируют в памяти то есть разместит это значение
по какому-то адресу в памяти даст ему определенный тип потому что из значение
всегда можно понять какого она типа то есть будет выделено память там будет тип
и значение но сослаться на это дело ниоткуда не возможно потому что мы не
сохранили это значение ни в какую переменную то есть в принципе на эту ячейку памяти у нас не будет нигде
записано адреса очень неудобно но если мы это значение передаем функцию то хоть
мы специального имени ему и не даем но когда вызывается функция вот тогда
функция есть какой-то аргумент и это значение может попасть в этот аргумент там имя по-другому
присваивается теперь тип вот значит у каждого значения на должен быть тип и там кто-то может
говорить что в java скрипте ну есть
такое вот вот почему то странное расхожее мнение что javascript это язык
без типа вы лишь это такое в общем очень часто такое слышу вовсе все значения в java script обязательно типизированных
другой вопрос что конечно же в java скрипте есть автоматическое приведение
типов и конечно оно смущает людей в основном то есть если вы один тип
значение одного типа будете там складывать или делитель умножать со значением другого типа они приведут к
какому-то общему и вот как раз тут не всегда можно проследить закономерность не всегда оно очевидно
там для начинающего и вы постепенно привыкнете это раз во вторых вы просто
должны писать на java скрипте как будто вы пишете на языке со строгой типизации
где вас крепление строгая а вот вы пишете как будто бы java script язык со строгой типизацией то есть если вы
складываете то пожалуйста складываете там строку за строкой а число с числом
не надо их в перемешку складывать потому что это во первых не оптимально с точки
зрения ну оптимизации они будут происходить а с другой стороны можно очень просто ошибок на делать таким
образом то есть но есть конечно формальное определение типа что тип это
какое-то множество значений и операции которые этим множеством определены если
у нас есть кого-то тип набор числа то над ними
определены математические операции для математики это там допустим множество
там допустим натуральных чисел и над ними существует
алгебраические операции которые вот к ним применимы точно так же и в языке программирования
вот есть еще в java скрипте типуля да у него может быть всего лишь два значения
это true или false и над этим my true или false есть операции
и или не танцор и собственно вот типом
называется это и сама множество значений true и фолз и все логические операции которые на
которую фолз и над значениями типа труд фолз могут быть произведены
вот у нас есть еще какие то странные типы java скрипте вы можете встречать
есть тип на у есть тип там define да вот
у этих двух типов есть только одно значение типа налто канал а типа андрей
только отдыхает ну на самом деле у нас есть еще предок
это объект поэтому на ул с объектом по
типам совместим потому что это ссылочный тип вы чуть позже перейдем к скалярным и
ссылочным типом и там это будет более более очевидно а тут пока что мы можем
понять что видите тут перечислено куча разных операций то есть над типом нам
бар мы можем делать вот такие вот операции но еще у конечно у нам бора есть некоторые ограничения потому что у
него есть ограничение по точности не любое число можно хранить в нам горе
записать того же любое а вот читать потом мы другое считаем потому что у нас
не хватило точности в ячейке памяти в которой этот набор хранится потому что
он хранится там специальном формате который определенных макс ecmascript стандартам оттуда он попал из ее
стандарта то есть как хранится набор это строго зафиксировано но у нас есть еще
тип bigint и вот там конечно мы можем хранить более крупные числа но зато не
можем дробных хранить то есть у каждого типа есть какие-то свои особенности
бегин те мы можем хранить там число размером 15 мегабайт а в нам бы ризотто мы можем хранить
число с большим количеством я не помню сколько конкретно давно вы можете это
посмотреть спецификация языка с каким-то большим количеством насчет этих самых
значений после точки до дробные значения
до теперь что такое литерал вы уже встречались с этим понятием значит
литерал это способ записи значения в языке программирования при помощи
синтаксиса этой программы да то есть вот мы когда пишем
строчку мы ставим ее в кавычки и это
есть литерал строки если мы пишем число вот мы написали 508 допустим на это и
есть литерал числа если нам нужно литерал бульона их всего два или
это true или false литералы есть и более сложные бывают натирал и для записи объектов записи массивов
записи вот различных структур данных ну это практически можно сказать это
такой вот формации реализации значения только сериализации его прямо в
язык java script в памяти она лежит одним способом а литералов она
записывается в коде ну вот на ул и отдыхает это тоже литералы
из литерал для объявления функции есть литерал для класса
так теперь что такое скаляр ну это тоже
связано и понятие потому что литералы бывают тоже скалярных типов бывают
литералы там структурных типов ну вот строка число true force это примитивные
типы потому что у них внутри нету никакой более мелкой структуры самая
маленькая и самая атомарная скалярная величина это еще может вызываться примитивный тип атомарные значение вот
это все синонимы скаляр примитив примитивный тип а товарное значение и
вот когда мы какие-то скалярные значения записываем в переменную передаем функцию
аргументом что-нибудь снимаю в коллекцию добавляем там или что-нибудь с ним
делаем то он всегда копируется то есть у нас есть значение скалярного типа и куда
бы мы его не поставили не передали она всегда копируется то есть она передается по значению
внутрь функции попадет там новый экземпляр там пятерки или новый экземпляр строки
конечно с точки зрения компиляторы и интерпретаторы то вот это вот передача
по значению она не всегда так работает да то есть в java скрипте это вообще
будет работать совершенно по-другому нам будет казаться что в строка передается
внутрь функции в качестве аргумента как значение потому что она будет вести себя
как значение но тем не менее это строка вообще во всем коде во всем бран тайме
java скрипта находится один раз лежит где-то в таблице и на нее просто все
ссылаются когда вот в любом месте программы появится еще раз строка такого
же самого вида она просто будет ссылаться на ту же самую строчку но для нас она будет
выглядеть как будто бы это не ссылка а именно скалярная величина которая ни на
что соваться не может и нам будет казаться что она копируется а на самом
деле там посылки передается вот чтоб
понять полностью что же такое скаляр нужно нам еще понять что такое величины
которые передаются по ссылкам или же указывают на какие-то значения для java
скрипта это в основном объекты и всякие их производные то есть это могут быть
массивы и функции экземпляры каких-то классов сами классы прототипы
ну то есть все что является объектом они
ведут себя немножко по-другому когда мы можем сделать
структурного типа такого вот или ссылочного типа экземпляр
и присвоить его в две переменные потом в одной переменной моего меняем а в другой
переменной мы обнаруживаем что там он тоже поменялся то есть сама ссылка у нас
работает как [музыка]
скалярное значение а вот содержимое этого объекта если мы его передали куда-то посылки передали
куда-то объект по ссылке в другую функцию он пришел в эту функцию и
присвоился там в какой-то аргумент дальше мы внутренние содержимого этого аргумента меняем то
есть не самый аргумент меняем его свойства меняем элементы которые из
которых он состоит мы можем менять и вот снаружи этой функции все эти изменения
тоже будут видны если массив передали в какую-то функцию внутри функции что-то
добавили в массив или удалили из массива это будет тот же самый массив которые снаружи а вот если мы число какое-то
записали в переменную там 508 записали в переменную передали в качестве
аргументов какую-то функцию и там его меняем присваиваем там добавили единицу
к нему то снаружи функции это не приведет ни к каким изменениям то есть
все что посылки все может иметь
несколько переменных несколько идентификаторов которые указывают на один и тот же инстанс на один и тот же
экземпляр этого сложного структурного типа или объекта а вот если это
скалярный то там получается что
внутренности никаких нету есть просто атомарные значение когда мы его меняем то
10 другая переменная ссылалась на 508 а мы-то 508 допустим на единицу
увеличили то это будут два разных значения ссылочные типы
они позволяют связывать значение лежащие в памяти с несколькими идентификаторами
скалярные нет а не по значению в каждый раз передаются копируются и такое теперь
мы дошли до одного из базовых понятий идентификатора и наверное мы его
введём как некоторые перечисление вот что является идентификатором понятно что
переменные это идентификаторы константы тоже идентификаторы если вы где то в своем
коде написали function declaration то есть объявление функции
не присвоили функцию в переменную а именно объявление функции то это тоже
идентификатор вы чуть позже там в лекции по синтаксису языка
свяжите научитесь находить где же в коде идентификаторы очень
многие слова которые находятся в коде не дентифик отары иногда слова и the
statement и иногда это операторы а иногда это идентификаторы то есть в
языке есть зарезервированные слова все которые зарезервированы идентификаторами
не являются а все что осталось любые имена которые вы придумываете
самостоятельно и пишите скажем так стараетесь их так назвать чтобы вам этот
код программы вообще хорошо читался вот это все идентификаторы то есть это
переменные и функции константы аргументы функциях тоже вы какое-то имя
придумываете этим аргументом это тоже идентификаторы вы когда создаете какие то классы это тоже идентификаторы причем
идентификаторы они имеют определенную область видимости и
значит обычно область видимости это тот блок кода в котором они написаны то есть
от фигурной скобки до другой фигурной скобки блок кода но мы чуть позже это понятие блок кода тоже введен ну вот
идентификатор виден в какой-то зоне видимости но мы можем идентификатор куда-то
экспортировать в другую зону видимости и импортировать из какой-то другой зоны видимости из другого файла из другой
функции из другого класса она может прийти какой-то к эта ссылка мы можем
значит записать ее в идентификатор и потом использовать у себя в современном
синтаксисе java скрипта даже добавили ключевое слово импорт для импорта
идентификаторов из других файлов но это собственно мы чуть позже разберем в
любом случае вы должны понять что очень
часто слова переменная используются не совсем к месту то есть
вместо того чтобы сказать константа или аргумент человек говорит
переменная просто потому что привык говорить или говорит имя переменной но
более точно в этих местах есть более общее понятие если мы говорим идентификатор мы точно не промажем
потому что любая переменная любая константа любая функция 100 идентификаторы то есть это более общее
понятие но вот если у вас есть уже конкретный идентификатор он может быть
одним из них это или константой переменная tags
теперь идем в подробности чем отличается
переменная это такая область памяти вот такой идентификатор который имеет
естественно имя тип есть какой-то адрес но из java скрипта мы адреса не видим и
там лежит какое-то значение это кусочек памяти вот там это значение лежит мы его
можем обращаться по адресу точнее мы можем к нему обращаться по
а идентификатор при исполнении переводится в адрес мы этого просто не видим ну естественно чтобы оперировать
этим значением которое лежит в переменной мы должны знать тип поэтому конечно там в переменной всегда лежит
тип и сначала java script читает тип а потом уже значение переменной чтобы
понимать как с ней работать
отличие переменных от там аргументов и констант это то что мы их
можем менять скажем так аргументы функции мы тоже можем менять но это плохо то есть если
функцию пришло какое-то значение в качестве аргумента и мы походу функции это значение меняем это в принципе
работать будет но это плохой стиль уже да то есть аргументы функции они
ведут себя как переменные но они немножечко другое да это тоже
индификатор и но другого типа так снова
тут пример сити name это имя переменной а пекин это вот значение переменной лет
это собственно способ способ объявления
у нас есть lebt const и когда-то был во расчета то есть такую строчку вы уже
разобрать я думаю можете и вне еще было присвоение в этой строчке есть же знак
равно и в данном случае знак равно он ничего не сравнивает одинарное равно и
слава богу что так сделали одинарное равно присваивает сравнивает двойное и
тройное равно ну я надеюсь что вам двойного равно не нужно будет использовать ваше двойное равно приводит
еще и к автоматическому преобразованию типов и это ведет к ошибкам поэтому
тройное равно это именно оператор сравнения одинарное это присвоение то есть
присвоение это что это когда мы какое-то значение задано и в виде литерала
присваиваем идентификатору допустим в переменную то есть уже как бы из тех понятий которые
мы сегодня набрали мы можем понять что такое присвоение практически все базовые
эти понятия мы сегодня уже видели да ну
в java скрипте присвоение не просто присвоить значение внутрь переменной она еще и вернет
какое-то значение то есть сам оператор присвоения модифицируют переменную но
если взять его в скобочки и это опять присвоить куда-то или передать как
аргумент куда-то то или поставить там if the сам оператор присвоения
еще и возвращает то значение которое вы присвоили поэтому можно писать такие
цепочки присвоение целые ну это мы уже на примере кода потом посмотрим то есть
вот если мы оператор присвоения взяли в скобочки еще куда-то присвоили
то мы то же самое значение еще раз получил или же передадим это не только в
скрипте такое бывает чем константы отличают это тоже идентификатор это же
мы какое-то значение в виде литерала записываем в идентификатор но менять его
вы уже не можем то есть вот такая вот запись const вот тайм-аут равно 5000
если мы потом еще раз присвоим туда там 3000 допустим там же скажет ошибку
нельзя в константу присваивать а если мы тут konce заменим на лад то все будет
хорошо но чтобы их отличать в коде переменный от constant наглядно быстро
отличать конечно там в ядре там может быть подсветка разная это значит при
наведении она может подсказывать какого типа и при помощи за счет какого
ключевого слова объявлена переменная но еще принято большими буквами записывать большими буквами через
подчеркивание а так константы для переменных принято cable кейс
нотация то есть это начиная с маленькой буквы любые буквы и цифры если там несколько
слов то одно слово от другого отделяется большой буквой то есть поэтому я думаю
что входит посмотрим уже когда будут примеры кода значит ну вы поняли что константы
нельзя менять хотя это тоже идентификаторы их тоже можно передать в какой-то аргумент но вот если константу
передать как аргумент функции и там это константа подставиться в другой
идентификатор который там был аргументом но там его уже можно будет менять как ни странно так сна у нас еще есть
структурные типы которые состоят из кучи значений примитивных типов
это могут быть массивы объекты это могут быть сыты то есть множество
bp то есть это хэш-таблицы это могут быть кортежи но в java script
те кортежи массивами передаются обычно используется литерал массивов и вообще
синтаксис записи массивов для того чтобы передавать кортежи то есть это скажем
так это упорядоченное множество или значит несколько значений передаваемых именно в том порядке в
котором мы хотим их передать так ну бывают еще тоже одно из базовых понятий
это флаг это обычно логическое значение я делаю удаление на слова обычно потому
что вообще это такое более высокоуровневые понятие которое ну вот
захотел программист сделать себе флаг строчки ну строкового типа никто ему не
помешает это сделать главное чтобы он его правильно проверим ну флаг может
быть строка число на самом деле но обычно флаг чаще всего имеется в виду более значения
то есть логическое true или false бывает это какие-то строчки тогда просто этот
флаг проще читается то есть мы его тогда можем сравнивать с каким-то с
несколькими строковыми значениями происходит это в java скрипте что флаг иногда используются строчки вместо
флагов потому что java скрипте нет перечисляем ого типа и номере that type который может
причисляем и тип это когда мы сами говорим что он может быть допустим там
там socket файл или там допустим что-нибудь там дескриптор окна вот три
варианта и сказали что вот эти три варианта имеют какие-то идентификаторы и только один из этих идентификаторов
можно присвоить в переменную определенного типа перечитаем идти у нас есть отдельная
лекция по перечисляемых типов уже вас крипте нет перечисляемых типов и в конечно можно при помощи классов
написать то есть при помощи уже сделать из класса в контейнер и у нас будут такие перечисляемые типы псевдо и мы там
будем флаги делать уже перечисляемых типов но очень часто я вижу что строчки
используют вместо этого но еще чаще это все-таки куда true force так теперь
из всего чего мы рассмотрели перейдем к более абстрактным вещам
что такое алгоритм во первых не все
парадигмы программирования основаны на алгоритмов но вот то с чего мы начинать
будем это императивного программирования она прекрасный алгоритмах и построена для
императивного программирования это достаточно базовое понятие то есть это это формальное описание порядка
вычислений при помощи которого мы решаем какую-то конкретную задачу и за какое-то
ограниченное конечное время то есть у нас есть класс задач и этот класс задач
решается алгоритмом и чтобы еще быть алгоритмом мы еще должны иметь возможность как-то оценить
сложность этого алгоритма но об этом мы тоже на отдельной лекции поговорим что вот эта последовательность действий
нам же нужно оценить насколько мы алгоритм оптимально написали мы должны будем
создать какие-то метрики какие то оценки сложности алгоритма чтобы их оптимизировать чтобы потом сказать что
вот этот алгоритм лучше чем этот потому что он допустим проще синтаксически а
вот этот лучше этого потому что он эффективнее вычислительно допустим это
бы чуть позже все эти понятия введем пока что просто алгоритм теперь программа и чем же он отличается от
алгоритма алгоритм это в принципе в программному коду никак не привязано
вещь алгоритм мы можем написать просто обычными словами на листочке обычным человеческим языком написать
блок-схемой или как-нибудь там значит разрисовать пошагово там что-нибудь такое
а программа это уже конкретный программный код то есть это уже алгоритм изложены в виде синтаксиса конкретного
языка написанный то есть это уже последовательности буковок плюс данные
то есть мы вот только что с вами видели что у нас есть различные типы данных
есть структурные типы данных и из них потом можно построить более сложные
вещи там в списке 2 связанные списки того очереди деревья и всякое такое
это все данные то есть вплоть от переменной до каких-то сложных деревьев это все данные плюс программный код и
вот если это вместе программа эти данные это собственно
программный код и данные это уже компьютерная программа она умеет исполняться на конкретной железяки за
определенное время то есть уже как это среда исполнении есть компилятор есть транслятор это уже
программа теперь мы попробуем совместить ну чтобы понять откуда взялось понятие
инженерии программного обеспечения вот мы сначала нырнем посмотрим что такое
инженерия это конечно от программирования понятие стоящая
чуть-чуть как бы в стороне и редко
вспоминаем и но все-таки программирование это инженерия то есть инженерия этого снова извлечения
какой-то пользы мы можем конечно написать программу она будет программой но она будет бесполезно а программная
инженерия именно извлекает определенную пользуюсь программу ну это то какие задачи полезные для
человека может решить программный код на вычислительной машине ну и конечно
инженерия она включает применение кучи
инструментариев это значит разные научные методы это разные технические
приемы методики эта структура программ эта структура целых информационных систем то
есть это и знание и различные там
технические приемы и научные прием это целый комплекс и это еще и процедурные то есть это
имеется в виду инженерия всегда подразумевает что у нас есть какой-то
процесс процесс разработки и изготовление чего-то поэтому тут
организационные моменты в инженерии тоже используется и конечно же вот когда мы программное обеспечение связываем с
инженерии мы получаем вот уже такую общую вещь инженерия программное
обеспечение то есть это приложение различных инженерных практик к индустрии
программного обеспечения которая включает там разработку архитектуры перед не еще наверное исследование
предметной области разработка программного обеспечения тестирование тестирование такое
тестирование секунд у нас целая куча лекции есть по тестированию там развертывание поддержка переписывание
реинжиниринг там рефакторинг все разные процессы которые вокруг
software engineering происходит у нас как бы да не только мы язык будем учить
и не только сами концепции программирования но и процесс мы тоже
будем учить то есть там как какие используются там системы контроля версий pull request и процесс принятия и
ветвление кода и борджа кода все это мы тоже будем проходить как он там
развертывается на серверах это тоже будет в курсе и частично это уже есть лекциях записанных так и шут такое
из всего этого программирования потому что программирование немножко шире до
программирование иногда это бывает еще и для просто для удовольствия и
периодически программисты программируют для удовольствия не особо извлекая какую-то пользу и не решая конкретной
задачи поэтому а иногда я решаю какую-то задачу они делают программные абстракции не
руководствуясь наукой или инженерными знаниями а просто на интуиции ну то есть
пока что программирование еще включает себя некоторую такую черную магию
но желательно чтобы мы все приемы
которые перри используем пытались кроме того что мы их просто использую в
программном коде чтобы мы их пытались еще осознать и разложить по полочкам и
объяснить почему они работают чтобы вся вот эта магия которая в коде есть чтобы
она вся становилась понятной и чтобы код был понятен и нам и нам через год и
другим людям через год и так далее чтобы эти программы могли жить то есть это
искусство инженерии решение задач при помощи вычислительной техники программирования ну понятно что
кодирование это когда у нас есть какое-то уже задание конкретное мы просто его набираем в виде синтаксиса
определенного языка кодирование более примитивная вещь у нас есть тазы у нас
есть задача уже понятно ну естественно втз есть какие-то модуле есть какие-то
классы есть функции и процедуры и мы просто наполнять там втц можем могут быть уже
контракты написанное конкретно что вот в такую то функцию должны поступать такие-то параметры с такими-то типами и
мы должны все это просто в виде какого-то синтаксиса языка изложить это уже кодирование так ну
собственно разработка программного обеспечения это процесс кодирование а также всех
этапов жизненного цикла потому что мы программу сначала проектируем как программу потом
разрабатываем тестируем отлаживаем ну это вот не вокруг значит там программного
продукта такое происходит а именно вокруг программного обеспечения программное обеспечение это уже чем
программный продукт потому что программное обеспечение разобрать программист а продукт это целая компания
уже рабат его id поэтому тут как раз только те методики которые используют
программист тестирование и отладка вот там профилирование кстати сюда не
написал еще поддержка сопровождения модификация ну в основном все эти вещи
делают программист не обязательно 1 автор но программист и дальше я еще хочу
тут несколько привести цитат который может быть они не такие точные как вот
те определения которые я сегодня показывал но они позволяют немножечко проникнуть в сам дух
программирование что очень важно и позволяют понять такие
вещи которые точными определениями не всегда скажешь ну да цитаты имеют
баллистическую ценность еще вот у верта это на самом деле не совсем цитата у
него целая книга так называется что алгоритмы плюс структуры данных равно программы
человек прямо вот название книги такое написал я вам в принципе в определение
очень похоже сказал да так потом еще тот
же самый вирт сказал нам такую штуку тоже это еще тот тролль был что
программы становятся медленнее гораздо быстрее чем железо становится быстрее ну
это собственно шутка над сама законом
мура что железо ускоряется до а вот мы как программные инженеры мы начинаем
делать все медленнее и медленнее программы и постепенно мы придумываем
новые такие способы программной инженерии которые полностью нивелируют рост железо памяти и там значит
процессора и всех остальных устройств ну да это конечно шутка в ней тоже есть
некоторая доля правды потом еще есть вот такое вот интересное
определение программируешь программирование сегодня это гонка разработчиков программ стремящихся
писать программы с большей и лучший идиоты устойчивостью и вселенной которая
пытается создать более опытных более отборных идиотов пока вселенная
побеждает ну то есть программа с одной
стороны это то что делает инженер из
программы будет иметь дело пользователь и конечно же пользователь всегда найдет
как неправильно пользоваться вашей программы и то у него обязательно получится но кроме того
тот код который вы написали он еще будет взаимодействовать с другими
программистами часто так бывает что вот вы написали а через некоторое время через пару лет этот код будут читать
другие люди и они там что-то не поймут и вот вы должны в программе своей
закладывать такие механизмы во первых чтобы они правильнее поняли да то есть
как мы это достигаем давая более понятные наименование
это очень важно и более понятные наименование и разделяя программу на более понятно и логические блоки когда у
нас переменные называются a pc а программа у нас в виде простыни из
двух top 200 строчек кода там с циклами условиями и все то естественно что идет
о устойчивость такой программы очень низкая и поэтому туда кто бы ни пришел очень велика
вероятность что он там все неправильно поймет и все испортит и потом это нужно будет проще выбросить чем написать
заново так идем дальше мы еще хотим
различить чем отличается процедура функция под программа метод еще могут быть другие
синонимы ну вот какие мне в голову пришли сейчас я перечислил
начинать их понимать мы будем с блока кода вот тут в примерах есть блок кода
открыть закрыть фигурную скобку это блок кода все подобных языках то есть это
блок кода содержит одну или больше statement of то есть одну или больше
инструкций и необходимые блоки кода для того чтобы логически разделять код на
какие-то части и для того чтобы делать области видимости то есть блок кода это
логически связанные группы инструкции или операторов и создают они
область видимости в которой объявлены и переменные внутри блока коля они видны только внутри этого блока кода
а также внутри блока кода может быть другой блок кода и но вот чтобы нам из
одного блока кода вызывать другой блок кода который находится снаружи его нужно
дать какой-то идентификатор а вот это уже мы можем делать при помощи там процедур функции и так далее мы сейчас
посмотрим но не во всех языках программирования блоки кода пишутся при помощи фигурных скобок открывающей и
закрывающей вот в лиспе допустим когда мы хотим сложить а и б мы пишем скобочку плюс сначала
оператор а потом список его аргументов + a и b вот так вот ну то
есть список а и b нужно что сделать сложить так выглядит блок кода в pascal
это бегин энд в питоне вообще блоки кода они невидимы и повышение из уступов
состоят практически там из пробелов или табуляции в принципе есть языки в
которых там значит или блоков кода нет вот вас м лири блоков кода нет там есть
только метки то есть есть языки в которых вообще нету
структурного программирования но это мы чуть позже когда будем парадигмы рассматривать когда у нас есть блоки
кода это сразу предполагает что у нас программа сделана
на языке структурного программирования когда есть вложенность когда нету гурту
и когда мы имеем какие-то области видимости потому что сразу первое
поколение языков было такими что вот где переменную не сделаешь она в любом месте программы видно это было ужасно потому
что нужно было придумывать огромное количество имен с одной стороны а с другой стороны когда компилятор
такую программу обрабатывал его нужно было очень много переменных поискать по
всей программе они же где угодно могут быть так теперь что такое процедура это
еще есть синоним подпрограмма или
процедуры это логически связанные группа инструкциями практически блок кода или операторов
имеющие имя то есть мы просто взяли блок кода и дали ей имя и вот это у нас процедура или подпрограмма
то есть процедура нужна нам для чего если у нас есть какое-то действие и нам
нужно его сделать в нескольких местах программы там сделать там и еще в другом месте мы можем один раз я написать а
потом по имени к этой последовательности инструкций обращаться то есть мы перри используем
один и тот же блок кода обращаюсь к нему по имени естественно процедура может
быть вызвано из разных мест с разными аргументами и там естественно в
процедуре может быть к это ветвление она может пойти по одной ветки или по другой ветке в зависимости от аргументов то
есть мы сделали обобщение процедура это некоторая абстракция обобщение
которая очень связана с понятием которые у нас уже была с понятием алгоритма то
есть можно алгоритм переложить в код в виде процедуры очень часто но вот в
таких языках как java script у нас синтаксиса специального для процедур нет
и поэтому мы используем синтаксис функций для написания процедур вообще
есть языки в которых процедуры и функции сильно отличаются вот такие вот как пускать и в чем основная разница в том
что процедура ничего не возвращает она просто делает это последовательность
действий а функция оно одно значение или там несколько значений несколько аргументов
преобразуют свои результаты а в процедуре результатов нету процедура после того как она что-то сделала она
поменяла какое-то состояние текущего процесса то есть она что-то в базе
данных в памяти в каких то устройствах ввода вывода на что-то поменяла то есть у нее есть побочные эффекты так
называемые вот все процедурное программирование программирование на под
программах оно построено на том что где-то есть там структуры данных в памяти и куча разных процедур к этим
структурам данных памяти обращается они все могут получать к ним доступ
ну не факт что у всех процедур будет видимость этих структур данных может
быть у нескольких процедур до процедура не возвращает значение в отличие от
функции но процедура может модифицировать свои аргументы
ну это для java скрипта тоже актуально
но только тем аргументы она может в java скрипте модифицировать которые
структурного типа то есть объект передан в какую-то процедуру а внутри процедуры
этот объект мы поменяли поля какие-то то для всех остальных частей кода эти поля
тоже будут другими tags ну и функция это абстракция
преобразования значений тут немножко то есть синтаксис функции как языке
программирования функций а вот как java скрипте или там все функция отец
синтаксис функция а есть функция вообще как абстракция программирования вообще сама эта абстракция она предполагает что
есть значение на вход и какое-то одно значение на может вернуть то есть это
однозначно и отображение входных значений выходные на вход какое-то
множество значений на выход можно каждому варианту с какими аргументами вы
вызвали функцию поставить в соответствие однозначное соответствие множество
значений которые она посчитала естественно функция в таком виде если
они думать да не просто как о синтаксисе функции именно в таком виде то функция
всегда должна иметь предсказуемый результат если мы функцию вызвали с
определенным аргументом вот допустим функция макс передали ей аргументы 5 и 8
всегда должна вернуть 8 всегда предсказуемо работает а процедура нет потому что процедура может где-то
операция еще на какие-то данные которые не через аргументы в нее попали у нее
было допустим какая то ссылка из глобального контекста она могла получить эту ссылку там или еще откуда то так сну
и функция конечно может быть задано блоков операторов то есть фигурные скобки это будет называться
лямбда-функцию мы это чуть позже когда бы проходить синтаксис функции посмотрим
а может быть задано выражением то есть в функциональный тип java скрипте мы можем
присваивать как именованный блок кода с несколькими операторами так и
expression то есть выражение когда у нас скобочки круглые и там внутри много
разных функций еще вызывается tags естественная функция имеет набор
аргументов функция может быть вызвано по имени или через указатель в java скрипте
естественно функция это ссылочный тип то есть можно иметь две переменных которые
ссылаются на одну и ту же функцию ну и
функция точно также как программа она способствует повторному использованию кода может быть из разных мест вызвано с
разными аргументами много раз функция еще имеют сигнатуры сигнатура то есть
это подпись и в дословном переводе чаще используется просто транслит го так вот
сигнатура функции на русском языке что это такое это собственно идентификатор
этой функции это количество и типы аргументов иногда еще именно аргументов тоже
включается в сигнатуру в зависимости от языка или синтаксиса описания сигнатур
потому что вот java скрипте чтобы
описать типы аргументов синтаксиса нет auto iv скрипте есть то есть
сигнатура функции в typescript те позволяет нам ограничить те значения
которые передаются в функцию ограничить определенными типами еще на этапе
до исполнения кода то есть когда мой кот компилируем мы сразу проверим типа ну
еще сигнатура функции предполагает тип результата
tags теперь метод метод это такая процедура
которая связана с определенным объектам то есть у нас есть объект памяти у
объекта могут быть поля объекта могут быть вот допустим тут снизу при есть
пример объект двумя полями а и b эtom 10 и там 10 и у этого объекта есть ещё
метод су и тут этот метод су он связан с
тем объектам в котором он находится и может обращаться к полям из этого объекта через this is a
ссылается на 10 язык б тоже на 10 то есть вот эта вот штука expression
который стоит после рад урна нам 10 сложить служат с 10 получится 20 это
вернется из метода сумм то есть у нас метод это такая процедура которая
привязана к объекту и которая может через ключевое слово адрес обращаться к
полям этого объекта к методам этого объекта там подписываться на события
этого объекта и ну короче в любом случае это процедура привязаны к определенному объекту объектный контекст
практических процедур так ну что такое цикл это многократное
исполнении блока операторов это наверно самое простое понятие которое тут у вас было
но лучше всего сюда вот я еще не дописал есть еще такое понятие как и тонирование
и вот она может достигаться не только при помощи цикла но и при помощи рекурсии
и при помощи и тренирующих методов вот java скрипте у массивов есть куча и тренирующих методов таких как там map
for each и при помощи них тоже создается что-то похожее на цикл но это не цикл
другие способы и тарирования или при помощи рекурсии рекурсия это вызов
функции самой себя естественно мы каждый раз можем какую-то переменную там изменять и при
следующем вызове в аргументы придет там
следующее значение этой переменной и таким образом мы можем пробив пробегать по числовым множествам по коллекциям и
так далее то есть в принципе вот функциональном программировании такого
понятия как циклы нету то есть почти все что мы сегодня посмотрели не почти все
вот половина тех понятий которые мы сегодня посмотрели для функционального программирования не применил и потому
что там нету переменных хотя идентификаторы есть там
только есть аргументы и они всегда должны ну в общем если нам нужно сложить
a и b и записать в c нам нужно вызвать другую функцию туда передать express in a + b а то
другая функция уже будет иметь первым аргументом c и вот таким образом вы результат сложения а и b запишем в цель
только уже в другой функции результаты появятся или наоборот вернуть из
какой-то функции sum вернуть этот результат ну это же передать в какой-то
вызов другой функции паши куда его положить вы вы никуда не можем положить кроме как передать другую функцию просто
модифицируемых переменных функциональном программировании нет то есть этих переменных
значения которых мы можем менять уже в обычном java скрипте мы можем закрепить
для переменной тип а менять только значение мне конечно мы можем идти
постоянно менять но это уже совсем плохо так ну еще и statement of у нас есть
условные statement и на которых очень
много всего построено то есть практически все программы это не просто последовательность линейное каких-то
действий а этой ветвление то есть нам нужно в одних условиях сделать одно в
других условиях друга и идти по разным веткам алгоритма то есть условие это
синтаксическая конструкция вот в скрипте у нас для условий есть два синтаксиса
это оператор if о котором мы тоже это будет
лекции синтаксисом языка есть еще тринарный оператор это тоже будет в другой лекции синтаксисом языка
ну вы понимаете что вот условие это более общая абстракция над ифом и
тернарного оператора это ветви ветвление в принципе ветвления может
достигаться еще немного другими способами вы допустим можем из какой-то коллекции
выбирать функцию допустим брать функцию которая
соответствует там пятому элементу в массиве вот из 5 у нас будет массив функций и мы читаем
из него пятый элемент и там функция лежит да и мы вызываем эту функцию
практически получается что у нас ветвление хотя у нас не было никакого ифа и не было
тернарного оператора вы просто нашли определенную функцию в коллекции ее
вызвали это же таким образом сделали ветвление то есть способов организовать ветвлением есть много так и теперь что
такое парадигма программирование потому что вот пока что мы кое-что сказали о
программировании императивным то есть когда у нас есть последовательность действий чуть-чуть
буквально там затронули функциональное программирование буквально чуть-чуть мы об этом будут специальные лекции вообще
наверное специальный курс это совершенно не основы но как минимум понятие что
такое парадигмы программирования уже сейчас будет для вас очень полезно парадигма она задает набор идей набор
понятий каких-то допущений и ограничений
это концепции принципы постулаты приемы
техники то есть это целый комплекс различных идей все это можно общим
словом идеи назвать до которые мы используем в том или ином языке программирования для
решения задач но так как вот у нас как базовый язык курса java script поэтому
на 1 парадигме мы останавливаться не будем потому что java script это всем известно это мульти парадигме ный язык
программирования он не прототип на ориентированный него пышный не функциональный он мульти парадигме ный
то есть мы можем писать программы смешивая разные подходы смешивая разные парадигмы и вот почему мы должны
научиться это тому чтобы правильно их смешивать чтобы не запутаться в мешанине
парадигмам это очень просто и тут я хочу сказать конечно что java script это один
из самых сложных языков для изучения программирования потому что очень много
разных инструментов и очень много возможностей большая гибкость но при этом конечно ну как бы
синтаксических каких-то конструкций синтаксических возможностей у него мало а вот скажем так из них построить
различных приемов и техник можно очень много и практически любую парадигму
программирования до недавнего времени разве что параллельное программирование на java скрипте было невозможно но вот у
меня уже там в конце прошлого года добавились некоторые лекции о параллельном программирование на java
скрипте потому что уже сейчас у нас есть потоки и там можно распараллеливание
параллели вать вычисления на разных ядрах процессора и обращаться к одним и
тем же областям памяти из разных собственно из разных runtime of из из
разных контекстов java script а то есть один кот однопоточный java script на
одном ядре другой тоже однопоточный java script на другом ядре но есть способы а то веки и там обертки
в объекты есть там критические секции там куча разных
других приёмов для того чтобы мы могли одни и те же структуры данных
менять из разных потоков не помешав друг другу то есть один поток может начать
один алгоритм это одну мою процедуру запустили другой другую процедуру они
начали менять одну и ту же самую структуру данных явно что они ее испортят поэтому нужно эту структуру
данных защищать блокировать или же допустим использовать конфликты
независимые структуры данных и всякие там другие приемы так еще парадигмах
парадигма предлагает модель решения задач и стиль программирования
многие парадигмы состоят почти полностью из шаблонов то есть из паттернов
какого по и допустим который в принципе функциональное программирование тоже из
шаблонов состоит просто они там так не называются но это что-то очень похожее
да ну вот можно сказать что там functor и лимонада это шаблон ну наверно в каком
то смысле то есть что такое шаблон это
какой-то пример решение задачи которые часто используются то есть вот мы его на
практике можем вычленить и узнавать вот вот тут этот шаблон
используется в другом месте вы его же найдем в третьем мы везде одинаковые
шаблоны и их ограниченное количество то есть программ можно написать любое
количество а вот шаблонов их ограниченное количество потому что сильно много их не получится из-за того
что синтаксис языка не позволит написать что угодно и вот из того что что
позволяет делать синтаксис языка еще что-то обладает смысла во что-то смыслом не обладает вот и как бы хорошие
эффективные обладающие смыслом значит
шаблоны как раз и называются паттернами вот такой ну вы их будем рассматривать
практически уже наверно там середины этого семестра и весь следующий семестр и весь
следующий год наверное ну а также будем рассматривать анти паторны то есть это шаблоны того
как не надо делать потому что ошибки тоже очень сильно повторяются и сильно
много разных типов ошибок нету ну ошибок ошибки более разнообразны чем хорошие
решения поэтому все эти темы тоже у нас будут
так и еще мы закончим целым рядом цитат
ну вот по поводу о п у нас уже речь зашла да так я добавил такую цитату
алана кея который как бы посмотрев на то что получилось из си плюс плюс а сказал
что вот когда я изобретал объектно-ориентированное программирование но вот я точно не имел ввиду то что получилось вот все + +
почему так это у меня есть отдельная лекция о том что случилось супы и в чем
там проблемы и почему lp очень часто остается недопонятым или
не понятым но неправильно есть специальная лекция она уже записано
выложено на видео вы можете ее посмотреть так вот про отладку это очень
хорошо отладка кода вдвое осложнения чем его написание так что если вы пишете код
настолько умна насколько можете то вы по определению не достаточно сообразительна
чтобы его отлаживать то есть старайтесь ну как бы вот отсюда понятно что нужно
пытаться писать программы как можно проще потому что когда вы столкнётесь
что в этой программе проблема то вот найти эту проблему сложнее чем написать
этот код вам захочется удалить все вот это и написать заново это гораздо проще
очень часто так что керниган тут очень точно хорошо сказал так еще одна алана
кея цитата большинство программ на сегодняшний день подобные египетским пирамидам из
миллиона кирпичиков друг на друге и без конструктивной целостности не просто построены грубой силой и
тысячами рогов ну как бы как это происходит тут наверное вот все сказано уже то есть без архитектуры без
структуры это самое основное что просто синтаксис языка если вы выучите просто синтаксис языка
это вообще ни о чем главное что нужно очень хорошо
отработать это архитектуру и структуру программ но к этому можно перейти только после того как вы освоите синтаксис хотя
бы одного языка а лучше нескольких чтобы причем чтобы эти языки были еще из
разных парадигм ну вот можно там брать какой-то один
императивный или а пышная другой там функциональный и это в принципе друг друга дополнит и вышли из одного языка у
вас будут поддерживать собственно когда вы будете на другом писать и сравнивать это очень полезно
тем не менее как вообще все это может работать если такой хаос программирование происходит вот из
предыдущей цитаты мы видим что это все-таки house как это может работать вот торвальд снова объясняет что
большинство хороших программистов делают работу не потому что ожидают оплаты или признание потому что получают
удовольствие программирования вот так вот она и работает только на этом и стоит очень тоже хорошая штука что
болтовня ничего не стоит покажите мне код это вот когда вы пытаетесь объяснить
какое-то понятие какому-то человеку я по и поясняю вот что он именно имел ввиду туда это он не про деньги говорит когда
вы кому-то что-то поясните и вот никак не можете прийти к общему мнению вполне
возможно что и вы и ваш оппонент имеют в виду одно и тоже или же называют одним
словом а имеют в виду разные и пока вы не посмотрите код вы не поймете что он имел ввиду ну или же у
вас с этим человеком вы уже сработались там несколько месяцев с ним уже общались
и вы уже имеете какие-то общие понятия и общие там понятийный аппарат который
позволяет вам быстро просто друг друга понимать с полуслова но вот чтобы понять
точно неизвестного человека гораздо проще посмотреть его код иногда проще
посмотреть нет с тобой вообще говорить не буду теперь по поводу того что вот
как связанный алгоритмы и структуры данных вы сказали что алгоритмы и структуры данных эта программа но есть
некоторый приоритет структуры данных важнее чем алгоритмы как ни странно уже
плохие программисты беспокоятся о том как они кода написали а хорошие
программисты бесплато беспокоятся о структурах данных и связях между ними
это перевод мой он скажем так с английского
есть куча там других переводов я именно так перевел потому что очень
часто именно в этой цитате теряется весь смысл благодаря тому что вместо и связях
между ними там пишут что такое типа и взаимоотношения или переводчики видимо
так алгоритмы и структуры данных вот под рукой кстати еще очень хорошие
заключение что умные структуры данных и тупой кот работают куда лучше чем
наоборот то есть если структуры данных будут плохие а кот хороший то это будет
плохо работать структура данных да я поясню ещё раз я
уже сегодня говорил что это вот мы сегодня видели что такое скалярное
значение из нескольких скалярных значений можно построить структуру
которая это допустим коллекция множество
список хэш-таблица объекты из объектов из труб и вот там насчет массивов можно
строить более сложные вещи там списке там 2 связанные списки
деревья все это данные то есть мы размещаем структурированные данные в
оперативной памяти и структурируем
их таким образом чтобы нам было удобно и вот как раз эта основная задача
программиста правильно размещать данные в памяти правильно делать для этих
данных области видимости правильно организовывать доступ к данным из разных
частей программы защищать какие-то структуры данных не
давать алгоритмом параллельно менять одни и те же структуры данных чтобы они
их не испортили то есть главное думать о
структурах данных а кот уже это вторичная вещь ну вы это на примерах
когда будете писать код поймете почему именно так пока что поверьте просто вот
этим 2 уважаемым людям и мне тоже так и
очень тоже важная штука это человека читаемость вот когда мы пишем какой-то
код то вы должны в первую очередь думать о том как его будет читать другой человек то есть вот я прочитаю стату что
программы должны писаться для людей которые будут их читать а машины которые
будут эти программы исполнять второстепенные на самом деле в java
скрипте это еще в 10 раз я думаю что он это не про java script говорил это в десять раз
еще умножить нужно эту цитату потому что
java script оптимизирует код вот мы будем его запускать в виртуальной машине
в 8 до или там spider-man кино кто будет его запускать допустим в ком-нибудь там
фаерфоксе то есть это среда запуска java скрипта и до того как он исполнится там
на процессоре до того как наша структура данных попадут в память там займут какое-то место и начнут приводить к тому
что инструкции процессора будут вызываться там это будет арифметико-логическое устройство там
дергаться там стояк регистры все машинерия до этого дело программа будет
разобрано синтаксическим анализатором и оптимизирована чуть-чуть то есть
возможно по этой программе можно уже прикинуть типы переменных в возможным
можно вынести инварианты циклов то есть те выражения которые каждый при проходе
каждого цикла одни и те же зачем их как ты в каждом цикле заново считать это января цикла то есть то что для разных
итераций цикла одинаково и значит интерпретатор
или компилятор или вот среда исполнении она вынесет из цикла такие экспресс шины или уберет то что называется мертвый кот
то есть если внутри функции где-то посередине стоит безусловный return
после него кусок кода какой то понятно что до этого куска кода никогда исполнение не дойдет поэтому его можно
просто выкинуть и есть более сложные [музыка] случаи когда код может быть
оптимизирован еще до исполнения но уже после исполнения может быть собрана
какая-то статистика и код оптимизирован еще более точно потому что вот мы оперируем переменными допустим в своей
функции оперируем наборами да а потом когда эта программа там 300 раз эту
функцию вызвало она смотрит почему-то эти наборы никогда не больше 256 и ну вот то есть они точно поместится в
один байт и вместо того чтобы там выделять там четыре байта или два байта на будет выделять всего лишь один байт
ну или там вот сколько ей будет удобно то есть скорее всего такая программа на 64-битной
архитектуре будет выделять машинное слово 64 бита на 32 битной архитектуре 32 бита то есть оптимизаторы java script
они будут наши программы преобразовывать модифицировать таким образом чтобы они лучше исполнялись но
эта задача интерпретатора и компиляторов по большей части а наша задача написать так чтобы
другой человек прочитал то есть мы не должны думать о том вот эту переменную
мы значит там чуть-чуть какой-то экспресс напишем вот таким хитро мудрым
способом и она разгонится очень сильно программа вот вот такого вот там преобразования типов там лет такого
ифа дополнительного там программа сильно разгонится если при этом программа станет совершенно не читабельной то это
очень плохо потому что скорее всего оптимизатор кода уже имеет в себе вот
этот вот паттерн оптимизации который мы хотели оптимизировать она сможет это оптимизировать а вот
человек который после нас придет читать эту программу или даже мы через полгода уже ничего не поймем поэтому такая
программа хоть она и будет там какое-то оптимальной она просто будет выброшена и переписана вот такое что ада решают ли
эту проблему комментария вопросы буду повторять потому что их уж не будет слышно в запись комментарии вырезаются и
по поводу комментариев еще такая штука если мы до комментарии при исполнении
вырезаются но человек-то их прочтет если кусок кода написан так что он требует
чтобы к нему еще написали коментарий если там одна строчка кода требует 20
строк комментариев это плохая строчка кода я нужно переписать таким образом чтобы не было комментариев
вообще комментарии в программе желательно не делать тут есть две разные
два разных подхода комментариев одни люди говорят что пишите побольше
комментариев там комментируйте свой код чтоб всем все было понятно другие люди
говорят пишите такие программы чтобы они были понятны и так несколько мин тариф две разные точки зрения я считаю что
нужно писать такой код чтобы комментариев было как можно меньше их нужно оставлять
ну допустим в комментариях очень часто пишут сигнатуры функций то есть вот перед функцией описывают какие там
аргументы будут какие типы и потом из этого можно генерировать документацию это хорошие комментарии а если у вас
написано что c равно a + b и рядом написано что берем складываем sb и
записываем в c это очень плохой комментарий потому что он просто увеличит количество кода раз тянет эту
функцию она станет хуже читаться ну я такое тоже встречал вот там особенно там
в китае и в японии там где они сложно читают по английски программа машинописного практически по-английски
они себе еще на своих иероглифов рядом записывают что же тут написано и такое
конечно очень плохо читается ну и если скажем так мы оптимизировали
какую-то часть кода но мы оптимизировали
ну вот нам нужно очень сильно сделать быстро в каком-то им и читабельность you пренебрегаем и
написали оптимально что вы чтобы было побыстрее вот тут вот рядом мы можем в комментарий
написать еще один вариант кода в которой который будет более читабельный то же самое мы сделали несколько
альтернативных вариантов и и в комментариях ставили чтоб можно было понять почему вы приняли такое решение
мы там можем описать почему вы написали так а не иначе то есть из комментариев должно быть ясно
дополнительные вещи которые как бы исхода неясны по процессу разработки допустим но уже
готово готовые в программном решении там комментарии должны быть сведены к
минимуму примерно так ну и по поводу
защиты от дурака это как бы и защиты от дурака там собственно и пользовательского интерфейса программ из
самих структур данных и алгоритмов и вот если вы сделали какую-то функцию как
защитить чтобы ее неправильно не вызвали мы можем придумывать
огромное количество способов защиты от дурака но всегда дурак нас обхитрить это
сто процентов это проверено всегда найдется человек который сможет
неправильно использовать то что вы сделали то есть читаю цитату страус
трафа что ограничение возможности языка с целью предотвращения программистских
ошибок лучшем случае опасно почему так потому что если вы в
язык внедряем какие-то дополнительные ограничить ограничивающие средством и
собственно программиста более квалифицировано вам его связываем по
рукам и ногам вот так нельзя по другому нельзя более квалифицированный разработчик он знает что так нельзя но в этом случае
он так хочет потому что он знает что он делает а вот если в языке все вот такое вот
запрещено и просто язык не будет компилироваться если там значит не
придерживаться вот этих определенных правил то в этот язык пойдут менее
квалифицированные программисты потому что еще на этапе компиляции и еще на
этапе синтаксиса языка сам язык будет им запрещать подсказывать
вот это нельзя вот это можно вы тут так лучше а это будет значить что общая масса этих
программистов она будет менее квалифицированное она скажем так мы
пожертвовали возможностями языка блага и и что получили поток неквалифицированных
еще людей то есть не очень хорошо так еще цитата страус тропа про сложность я
всегда мечтал мечтал о том чтобы мы моим компьютером можно было пользоваться так
же легко как и телефоном моя мечта сбылась я уже не могу разобраться как пользоваться моим телефоном то есть
сложность программы растет но страуструп это конечно такой алмазный чувак и вот
телефоне и мы уже сложно хотя это тоже не последний человека программирование представлять но вот я кстати за многие
современные идеи и там среды разработки сажусь или там значит если сажусь там за
макколи заведу тоже так вроде не последний человек программирование но он я уже сложно там
что-то в общем непонятная среда я привык в командной строки консоли и вот всю эту
сложность но я бы вообще браузер и выбрал я бы вообще всех пользователей предложил бы просто командную строчку
выходите в интернет и там мигает курсор и вы пишите что хотите вот это сложно я
должен быстро остров тоже бы поддержал такую тему так пойдем дальше dx странам
сказал еще такую вещь это по-моему до заключительная штука так все-таки что же
такое программирование если отладка это процесс удаления ошибок то программирование это должно быть
процессом их внесение в код когда вы программируете неизбежно это
написание ошибок ну то есть кучи конечно всего полезного но ошибок тоже и как бы
как писать сразу хорошо я вам не раз к я вам расскажу как писать как вы сможете
а потом постепенно улучшать этот код улучшать его качество ну то есть не знаем написать идеальные абсолютно но
улучшать его качество всегда можно вот чтобы какой бы код не был там всегда можем найти что-нибудь что можно
оптимизировать всегда можно улучшить где-то так так на сегодня все если кто-то хочет вы
оставайтесь на семинар спрашивайте вопросы сейчас перерыв минут 10-15 давайте 15 минут
